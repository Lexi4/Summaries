МДК 02.02 Разработка и защита баз данных
Андриянова Элла Максовна
** пары
---------------------------------------------------------
1 пара - 09.09.2019
	Должны досдать практические работы за прошлый год, должны сделать курсовую работу, а для начала выбрать её предметную область.

	Проектирование и разработка баз данных

	Основы SQL:
Рост количества данных,Ю необходимость их хранения и обработк, привели к тому, что возникла потребность в создании стандартного языка баз данных, который мог бы функционировать в многочисленных компьютерных системах различных видов. Действительно, с его помощью пользователи могут манипулировать данными независимор от того, работают ли они на персональном компьютере, сетевой рабочей станции или универсальной ЭВМ.
	Стандарт на язык SQL был выпущен американским национальным институтом стандартов (ANSI) в 1986 году, а в 1987, ISO приняла его в качестве международного. Нынешний стандарт SQL известен под названием SQL/92
	Одним из языков, появившихся в результате разработки реляционной модели данных, является язык SQL (Structured Querry Language). Под реализацией языка SQL понимается программныый продукт SQL.
	Основные категории команд языка SQL:
DDL - язык определения данных
DML - язык манипулирования данныъ
DQL - язык запросов
DCL - язык управления данными
команды администрирования данных
команды управления транзакциями
	Определение структур базы данных(DDL)
	Язык определения данных(data definition language, ddl) позволяет создавать и изменять структуру обьектов базы данных, например создавать и удалять таблицы
	Основными командами языка DDL являются следующие:
		CREATE TABLE - создать таблицу
		ALTER TABLE - изменить таблицу
		DROP TABLE - удалить таблицу

		CREATE INDEX - создать индекс
		ALTER INDEX - изменить индекс
		DROP INDEX - убрать индекс

	Манипулирование данными(DML)
		INSERT - вставить новую строку
		UPDATE - изменить существующую
		DELETE - удалить строку

	Выборка данных(DQL)
		SELECT - выборка данных, гы
	
	Язык управления данными(DCL - Data Control Language)
	Управление доступом к информации:
		GRANT - Дать доступ
		REVOKE - Отозвать доступ

	Команды администрирования данных:
С помощью команд администрирования данных пользователь осуществляет контроль за выполняемыми действиями и анализирует операции базы данных. Они также могут оказаться полезными при анализе производительности системы. Не следует путать администрирование данных с администрированием базы данных, которое представляет собой общее управление базой данных и подразумевает использование команд всех уровней.
	
	Команды управления транзакциями:
		COMMIT - Внести изменения
		ROLLBACK - Откатить 
		SAVEPOINT - Создать точку сохранения
		SET TRANSACTION - Назначить транзакцию

	Преимущества языка SQL - является основой многих СУБД, т.к отвечает за физическое структурирование и запись данных на диск, а также за чтение данных с диска, позволяет принимать SQL-запросы от других компонентов СУБД и пользовательских приложений. Таким образом, SQL - мощный инструмент, который обеспечивает пользователям, программам и вычислительным системам доступ к информации содержащейся в реляционных БД.
Достоинства:
	1. Стандартность
	2. Независимость от конкретных СУБД.
	3. Возможность переноса с одной вычислительной системы на другую
	4. Реляционная основа языка, табличная структура реляционной БД хорошо понятна, а потому язык прост для изучения.
	5. Возможность программного доступа к БД.
	6. Возможность интерактивных запросов обеспечивающая немедленный доступ
	7. Обеспечение различного представления данных - с помощью SQL можно представить такую структуру данных, что тот или иной пользователь будет видеть различные их представления. Кроме того данные из разных частей БД могут быть скомбинированы и представлены в виде одной простой таблицы, а значит представления пригодны длоя усиления защиты БД и её настройки под конкретные приспособленности БД к изменяющимся требованиям предметной области.
	8. Возможность динамического изменения и расширения структуры БД.
	
	Любой язык работы с БД должен предоставлять следующие возможности:
	1. Создавать базы данных и таблицы с полным описанием их структуры
	2. Выполнять основные операции манипулирования данными, в частности, вставку, модификацию и удаление данных из таблиц.
	3. Выполнять простые и сложные запросы осуществляющие преобразование данных.

ВАЖНАЯ ИНФОРМАЦИЯ, КУРСОВИК, КУРСАЧ
=========================================================	
	Защита курсовика в феврале месяце. Сдаём все курсовики в Январе. 
	Пояснительная записка и разработанная БД под практическое применение. 
	Должна быть форма в которую заносится информация.
Пользователь не должен видеть таблицу, а исключительно форму ввода и форму запроса.	
=========================================================

	Запись SQL-операторов. Идентификаторы языка SQL предназначены для обозначения обьектов в базе данных и являются именами таблиц представлений столбцов и обьектов базы данных. В качестве обозначения идентификаторов могут использоваться буквы английского алфавита, как строчные так и прописные, десятичные цифры т.е 0-9 и нижние подчёркивание "_". К обозначениям идентификаторов предьявляются следующие требования. 
	1. Длина идентификатора не превышает 128 символов. 
	2. Первый символ идентификатора обязательно буква. 
	3. Не допускаются пробелы
	
	Выглядит запись идентификатора следующим образом:
<идентификатор>::=<буква> {<буква>|<цифра>}[..n]
=========================================================
Символ |			Обозначение
=========================================================	
  ::=  |	Равно по определению
---------------------------------------------------------
   |   |  Необходимость выбора одного из нескольких 			  |   приведенных значений 	
---------------------------------------------------------
 <...> |  Описанная с помощью метаязыка структура языка
---------------------------------------------------------
 {...} |  Обязательный выбор некоторой конструкции из 		  |  списка
---------------------------------------------------------
 [...] |  Необязательный выбор некоторой конструкции из    	  |  списка
---------------------------------------------------------
 [...n]| Необязательная возможность повторения    		  | конструкции от нуля до нескольких раз
---------------------------------------------------------

	Описание учебной базы.

	В качестве примера будет использоваться небольшая БД, отражающая процесс поставки и продажи некоторого товара постоянным клиентам.
	Значит есть две сущности клиент и товар. Они находятся в отношении многие ко многим.
	 Реляционная база данных не допускает отношений "многие ко многим", чтобы это устранить необходимо ввести новую сущность. Назовём её сделка. Тогда соотношение сущности товар-сделка в конкретной сделке будет находится в отношении "многие к одному", также отношение сделка-клиент находятся в взаимосвязи "Один к многим". Таким образом мы избавились от соотношения "многие к многим". 
	Определим атрибуты и свяжем их с сущностями.
	1. Товар - характеристика, название, тип, цена, сорт
	2. Клиент - имя, отчество, фамилия, фирма, город, телефон.(ФИО нельзя делать одним полем)
	3. Сделка - дата, количество проданного товара.
	
	Важным этапом в создании БД является определение атрибутов которые однозначно определяют каждый экземпляр сущности, т.е выявление первичных ключей.
	Поэтому вводим первичные ключи:
	1. Товар - код_товара(может быть и артикул товара)
	2. Клиент - код_клиента(например паспорт, ИНН итд)
	3. Сделка - код_сделки
	
	Далее надо установить связи между таблицами. ОДин покупатель может неоднократно покупать товары. Поэтому между таблицами Клиент и Сделка имеется связь "один-ко-многим" по полю Код_клиента.
	Каждый покупатель может приобрести несколько различных товаров, поэтому между таблицами Товар и Сделка имеется связь "один-ко-многим" по полю "код товара"
	Теперь нужно создать связи между таблицами самой базы данных. КодКлиента и КодТовара являются внешними ключами в таблице Сделка, как-бы отсылая на записи с ними.
	
---------------	---------------     ----------------	
|	Товар    |    |    Сделка    |    |    Клиент     |
--------------     ---------------     ----------------
|PK |КодТовара|    |PK |КодСделки |    |PK |КодКлиента |
--------------     ---------------     ----------------
|   |Название |    |   |Количество|    |   |Фамилия    |
|   |Тип      |<---|   |Дата      |--->|   |Имя        |
|   |Сорт     |    |FK1|КодТовара |    |   |Отчество   |
|   |Цена     |    |FK2|КодКлиента|    |   |Фирма      |
|   |Остаток  |    ----------------    |   |ГородКлиент|
|   |ГородТов |                        |   |Телефон    |
---------------                        -----------------
		 Рис 1. Пример Структуры базы данных

Типы данных SQL
	В языке SQL имеется шесть скалярных типов данных, определенных стандартом. Их краткое описание представлено в таблице:
=========================================================
     Тип данных     |             Обьявления
=========================================================
 Символьный	     | CHAR|VARCHAR
 Битовый		     | BIT|BIT VARYING
 Точные числа	     | NUMERIC|DECIMAL|INTEGER|SMALLINT
 Округлённые числа | FLOAT|REAL|DOUBLE PRECISION
 Дата\Время	     | DATE|TIME|TIMESTAMP
 Интервал		     | INTERVAL
=========================================================	
	Символьные данные состоят из последовательности символов разрешённых в СУБД набор символов. Обычно используют ASCII, EBCDIC. Для определения используется формат:
	<символьный тип>::={CHARACTER [VARYING][Длина]|[CHAR|VARCHAR][Длина]}
	
	Битовый тип данных используется для определения битовых строк, т.е последовательности двоичных цифр.
Определяются данные при помощи следующего формата:
	<битовый тип>::=BIT[VARYING][длина]

	Точные числа(int), масштаб указывает количество дробных десятичных разрядов числа. Определяется форматом:
	<фиксированный_тип>::={NUMERIC[точность[масштаб]]{DECIMAL|DEC}[точность[,масштаб]]|{INTEGER|INT}|SMALLINT}

	Типы NUMERIC и DECIMAL предназначены для хранения чисел в десятичном формате. По умолчанию длина дробной части равна нулю, а INTEGER(INT)используется для хранения больших положительных или отрицательных целых чисел. Тип SMALLINT - сокращенная версия INT
	
	Округлённые числа(float).Применяются обычно в научной нотации, их нельзя представить в компьютере достаточно точно, но можно точность выбрать.
	<вещественный_тип>::={FLOAT[точность]|REAL|DOUBLE PRECISION}
	
	Дата и время. 